/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={671:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.alertFunctionVolume=void 0;const o=r(5),l=r(234),n=r(637);t.alertFunctionVolume=function(){for(let e of o.arrBtcVolumeAlerts)o.btcVolume>e.price&&(e.status=!0,(0,n.volumeAlertBtnReset)(),(0,n.logs)("alert-match",e,"volumen"));for(let e of o.arrEthVolumeAlerts)o.ethVolume>e.price&&(e.status=!0,(0,n.volumeAlertBtnReset)(),(0,n.logs)("alert-match",e,"volumen"));(0,l.soundAlert)()}},121:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.alertFunctionPrice=void 0;const o=r(5),l=r(234),n=r(637);t.alertFunctionPrice=function(){for(let e of o.arrBtcHigherAlerts)o.btcPrice>e.price&&(e.status=!0,(0,n.logs)("alert-match",e));for(let e of o.arrBtcLowerAlerts)o.btcPrice<e.price&&(e.status=!0,(0,n.logs)("alert-match",e));for(let e of o.arrEthHigherAlerts)o.ethPrice>e.price&&(e.status=!0,(0,n.logs)("alert-match",e));for(let e of o.arrEthLowerAlerts)o.ethPrice<e.price&&(e.status=!0,(0,n.logs)("alert-match",e));(0,l.soundAlert)()}},221:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(671),t),l(r(121),t),l(r(271),t)},271:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setAlertsForArrays=void 0;const o=r(5),l=r(489),n=r(637);t.setAlertsForArrays=function(e,t){var r,s,i,c,a;const u=parseFloat(null===(r=document.getElementById("input-alert-simple"))||void 0===r?void 0:r.value),d=parseFloat(null===(s=document.getElementById("input-alert-1"))||void 0===s?void 0:s.value),p=parseFloat(null===(i=document.getElementById("input-alert-2"))||void 0===i?void 0:i.value),m=parseInt(null===(c=document.getElementById("input-volume-alert"))||void 0===c?void 0:c.value),h=null===(a=document.getElementById("alert-desc"))||void 0===a?void 0:a.value;let g=o.arrBtcHigherAlerts,f=o.arrBtcLowerAlerts,y=o.arrBtcVolumeAlerts,v=o.arrEthHigherAlerts,A=o.arrEthLowerAlerts,E=o.arrEthVolumeAlerts;"bitcoin"===e?"simple"===t&&u>0?(o.btcPrice<u?g.push(new o.Alert(u,e,h,"Superior")):f.push(new o.Alert(u,e,h,"Inferior")),(0,o.setArrBtcHigherAlerts)(g),(0,o.setArrBtcLowerAlerts)(f),(0,n.logs)("alert","price",e)):"double"===t&&d>0&&p>0?o.btcPrice>d||o.btcPrice<p?alert("Ingresa los campos correctamente"):(g.push(new o.Alert(d,e,h,"Superior")),(0,o.setArrBtcHigherAlerts)(g),f.push(new o.Alert(p,e,h,"Inferior")),(0,o.setArrBtcLowerAlerts)(f),(0,n.logs)("alert","price",e)):"volume"===t&&m>0?(y.push(new o.Alert(m,e,h,"Volumen")),(0,o.setArrBtcVolumeAlerts)(y),(0,n.logs)("alert","volume",e)):alert("Rellena los campos"):"ethereum"===e&&("simple"===t&&u>0?(o.ethPrice<u?v.push(new o.Alert(u,e,h,"Superior")):A.push(new o.Alert(u,e,h,"Inferior")),(0,o.setArrEthHigherAlerts)(v),(0,o.setArrEthLowerAlerts)(A),(0,n.logs)("alert","price",e)):"double"===t&&d>0&&p>0?o.ethPrice>d||o.ethPrice<p?alert("Ingresa los campos correctamente"):(v.push(new o.Alert(d,e,h,"Superior")),(0,o.setArrEthHigherAlerts)(v),A.push(new o.Alert(p,e,h,"Inferior")),(0,o.setArrEthLowerAlerts)(A),(0,n.logs)("alert","price",e)):"volume"===t&&m>0?(E.push(new o.Alert(m,e,h,"Volumen")),console.log(e),(0,o.setArrEthVolumeAlerts)(E),(0,n.logs)("alert","volume",e)):alert("Rellena los campos")),(0,n.showAlertsLi)(),(0,l.showAlertOnConsole)();const b=o.Alert.counter;localStorage.setItem("AlertCounter",b)}},301:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.checkdata=void 0;const o=r(5),l=r(637);t.checkdata=function(){null!==o.btcPrice&&void 0!==o.btcPrice&&0!=o.btcPrice&&null!==o.ethPrice&&void 0!==o.ethPrice&&0!=o.ethPrice&&null!==o.btcVolume&&void 0!==o.btcVolume&&0!=o.btcVolume&&null!==o.ethVolume&&void 0!==o.ethVolume&&0!=o.ethVolume?(0,l.logs)("getPrice"):(0,l.logs)("getPriceError")}},63:function(e,t,r){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(l,n){function s(e){try{c(o.next(e))}catch(e){n(e)}}function i(e){try{c(o.throw(e))}catch(e){n(e)}}function c(e){var t;e.done?l(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,i)}c((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getPriceAndVolume=void 0;const l=r(5),n=r(489),s=r(637);t.getPriceAndVolume=function(){return o(this,void 0,void 0,(function*(){try{const[e,t,r,o]=yield Promise.all([fetch("https://fapi.binance.com/fapi/v1/ticker/24hr?symbol=BTCUSDT"),fetch("https://fapi.binance.com/fapi/v1/ticker/24hr?symbol=ETHUSDT"),fetch("https://fapi.binance.com/fapi/v1/klines/?symbol=BTCUSDT&contractType=PERPETUAL&interval=1m&limit=2"),fetch("https://fapi.binance.com/fapi/v1/klines/?symbol=ETHUSDT&contractType=PERPETUAL&interval=1m&limit=2")]);if(!(e.ok&&t.ok&&r.ok&&o.ok))throw new Error("Error getting data from Binance");let n=yield e.json(),s=yield t.json(),i=yield r.json(),c=yield o.json();n=parseFloat(n.lastPrice),s=parseFloat(s.lastPrice),i=Math.floor(i[0][5]),c=Math.floor(c[0][5]),document.querySelectorAll(".bar").forEach((e=>{e.style.display="block"})),(0,l.setBtcPrice)(n),(0,l.setEthPrice)(s),(0,l.setBtcVolume)(i),(0,l.setEthVolume)(c)}catch(e){console.error(e),(0,s.logs)("getPriceError"),document.querySelectorAll(".bar").forEach((e=>{e.style.display="none"}))}const e=document.getElementById("btc-price");e&&(e.innerHTML=(0,n.addDecimal)(l.btcPrice,1));const t=document.getElementById("eth-price");t&&(t.innerHTML=(0,n.addDecimal)(l.ethPrice,2));const r=document.getElementById("btc-volume");r&&(r.innerHTML='<span class="h-vol"> Volumen M1: </span>'+l.btcVolume);const o=document.getElementById("eth-volume");o&&(o.innerHTML='<span class="h-vol"> Volumen M1: &nbsp  </span>'+l.ethVolume)}))}},395:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(301),t),l(r(63),t)},700:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Alert=void 0;const o=r(353);class l{constructor(e,t,r,o){this._id=++l.counter,this._price=e,this._currency=t,this._description=r,this._type=o,this._status=!1}get id(){return this._id}get price(){return this._price}set price(e){this._price=e}get currency(){return this._currency}set currency(e){this._currency=e}get description(){return this._description}set description(e){this._description=e}get type(){return this._type}set type(e){this._type=e}get status(){return this._status}set status(e){this._status=e}toString(){return`---- NÂº: ${this._id} / D: ${this._description} / CUR: ${this._currency} / P: ${this._price} / T: ${this._type} / S: ${this._status}`}toJSON(){return{id:this._id,price:this._price,currency:this._currency,description:this._description,type:this._type,status:this._status}}}l.counter=o.counterForStorage,t.Alert=l},353:(e,t,r)=>{var o;Object.defineProperty(t,"__esModule",{value:!0}),t.mute=t.logIdDontRepeat=t.logContent=t.hourSimple=t.ethVolume=t.ethPrice=t.dateSimple=t.cryptoRadioChoice=t.counterForStorage=t.btcVolume=t.btcPrice=t.arrEthVolumeAlerts=t.arrEthLowerAlerts=t.arrEthHigherAlerts=t.arrBtcVolumeAlerts=t.arrBtcLowerAlerts=t.arrBtcHigherAlerts=t.alertTypeChoice=t.setCounterForStorage=t.setArrEthVolumeAlerts=t.setArrEthLowerAlerts=t.setArrEthHigherAlerts=t.setArrBtcVolumeAlerts=t.setArrBtcLowerAlerts=t.setArrBtcHigherAlerts=t.setDateSimple=t.setHourSimple=t.setLogContent=t.setLogIdDontRepeat=t.setMute=t.setAlertTypeChoice=t.setCryptoRadioChoice=t.setEthVolume=t.setBtcVolume=t.setEthPrice=t.setBtcPrice=void 0;const l=r(489);let n=0;t.btcPrice=n;let s=0;t.ethPrice=s;let i=0;t.btcVolume=i;let c=0;t.ethVolume=c;let a="bitcoin";t.cryptoRadioChoice=a;let u="double";t.alertTypeChoice=u;let d=!1;t.mute=d;let p=!0;const m=localStorage.getItem("arrBtcHigherAlerts"),h=localStorage.getItem("arrBtcLowerAlerts"),g=localStorage.getItem("arrBtcVolumeAlerts"),f=localStorage.getItem("arrEthHigherAlerts"),y=localStorage.getItem("arrEthLowerAlerts"),v=localStorage.getItem("arrEthVolumeAlerts");(m||h||g||f||y||v)&&(p=!1);let A=[];t.arrBtcHigherAlerts=A,m&&(t.arrBtcHigherAlerts=A=JSON.parse(m)),!m&&p&&A.push({id:1,price:5e4,currency:"bitcoin",description:"Alarma de ejemplo 1",type:"Superior",status:!1});let E=[];t.arrBtcLowerAlerts=E,h&&(t.arrBtcLowerAlerts=E=JSON.parse(h)),!h&&p&&E.push({id:2,price:2e3,currency:"bitcoin",description:"Alarma de ejemplo 2",type:"Inferior",status:!1});let b=[];t.arrBtcVolumeAlerts=b,g&&(t.arrBtcVolumeAlerts=b=JSON.parse(g)),!g&&p&&b.push({id:3,price:3e4,currency:"bitcoin",description:"Alarma Volumen de ejemplo 3",type:"Volumen",status:!1});let B=[];t.arrEthHigherAlerts=B,f&&(t.arrEthHigherAlerts=B=JSON.parse(f)),!f&&p&&B.push({id:4,price:1e4,currency:"ethereum",description:"Alarma doble de ejemplo ",type:"Superior",status:!1});let _=[];t.arrEthLowerAlerts=_,y&&(t.arrEthLowerAlerts=_=JSON.parse(y)),!y&&p&&_.push({id:5,price:500,currency:"ethereum",description:"Alarma doble de ejemplo ",type:"Inferior",status:!1});let S=[];t.arrEthVolumeAlerts=S,v&&(t.arrEthVolumeAlerts=S=JSON.parse(v)),!v&&p&&S.push({id:6,price:9e4,currency:"ethereum",description:"Alarma Volumen de ejemplo",type:"Volumen",status:!1},{id:7,price:8e4,currency:"ethereum",description:"Alarma Volumen de ejemplo",type:"Volumen",status:!1});let P=JSON.parse(null!==(o=localStorage.getItem("AlertCounter"))&&void 0!==o?o:"7")||7;t.counterForStorage=P;let O=[];t.logIdDontRepeat=O;let I,w,L=[];t.logContent=L,t.hourSimple=I,t.dateSimple=w,t.setBtcPrice=e=>t.btcPrice=n=e,t.setEthPrice=e=>t.ethPrice=s=e,t.setBtcVolume=e=>t.btcVolume=i=e,t.setEthVolume=e=>t.ethVolume=c=e,t.setCryptoRadioChoice=e=>t.cryptoRadioChoice=a=e,t.setAlertTypeChoice=e=>t.alertTypeChoice=u=e,t.setMute=e=>t.mute=d=e,t.setLogIdDontRepeat=e=>t.logIdDontRepeat=O=e,t.setLogContent=e=>t.logContent=L=e,t.setHourSimple=e=>t.hourSimple=I=e,t.setDateSimple=e=>t.dateSimple=w=e,t.setArrBtcHigherAlerts=e=>{t.arrBtcHigherAlerts=A=e,(0,l.saveLocalStorage)()},t.setArrBtcLowerAlerts=e=>{t.arrBtcLowerAlerts=E=e,(0,l.saveLocalStorage)()},t.setArrBtcVolumeAlerts=e=>{t.arrBtcVolumeAlerts=b=e,(0,l.saveLocalStorage)()},t.setArrEthHigherAlerts=e=>{t.arrEthHigherAlerts=B=e,(0,l.saveLocalStorage)()},t.setArrEthLowerAlerts=e=>{t.arrEthLowerAlerts=_=e,(0,l.saveLocalStorage)()},t.setArrEthVolumeAlerts=e=>{t.arrEthVolumeAlerts=S=e,(0,l.saveLocalStorage)()},t.setCounterForStorage=e=>t.counterForStorage=P=e},5:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(700),t),l(r(353),t)},604:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDecimal=void 0,t.addDecimal=function(e,t){return e.toString().includes(".")||1!=t?2==t?e.toFixed(t):e:e.toFixed(t)}},584:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.showDate=void 0;const o=r(5);t.showDate=function(){let e=new Date;const t=e=>(e<10&&(e="0"+e),e);let r=`${t(e.getHours())}:${t(e.getMinutes())}:${t(e.getSeconds())}`,l=`${e.getDate()} / ${e.getMonth()+1}`;const n=document.getElementById("hour-div");n&&null!==r&&(n.innerHTML=`<p>${r}</p>`),(0,o.setHourSimple)(r),(0,o.setDateSimple)(l)}},489:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(604),t),l(r(584),t),l(r(373),t),l(r(191),t)},373:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.saveLocalStorage=void 0;const o=r(5);t.saveLocalStorage=function(){localStorage.setItem("arrBtcHigherAlerts",JSON.stringify(o.arrBtcHigherAlerts)),localStorage.setItem("arrBtcLowerAlerts",JSON.stringify(o.arrBtcLowerAlerts)),localStorage.setItem("arrBtcVolumeAlerts",JSON.stringify(o.arrBtcVolumeAlerts)),localStorage.setItem("arrEthHigherAlerts",JSON.stringify(o.arrEthHigherAlerts)),localStorage.setItem("arrEthLowerAlerts",JSON.stringify(o.arrEthLowerAlerts)),localStorage.setItem("arrEthVolumeAlerts",JSON.stringify(o.arrEthVolumeAlerts))}},191:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.showAlertOnConsole=void 0;const o=r(5);t.showAlertOnConsole=function(){console.log("-------------------------------------------------------"),console.log("arreglo btc altas:"+o.arrBtcHigherAlerts),console.log("arreglo btc bajas: "+o.arrBtcLowerAlerts),console.log("arreglo btc  volumen: "+o.arrBtcVolumeAlerts),console.log("arreglo eth altas:"+o.arrEthHigherAlerts),console.log("arreglo eth bajas: "+o.arrEthLowerAlerts),console.log("arreglo eth volumen: "+o.arrEthVolumeAlerts)}},470:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.alarmSettingsSounds=void 0;const o=r(5);t.alarmSettingsSounds=function(e){const t=document.getElementById("sonido-1"),r=document.getElementById("sonido-2");"p"===e&&!1===o.mute&&t&&t.play(),"v"===e&&!1===o.mute&&r&&r.play()}},234:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(470),t),l(r(859),t)},859:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.soundAlert=void 0;const o=r(5),l=r(470);t.soundAlert=function(){for(let e of o.arrBtcHigherAlerts)1==e.status&&(0,l.alarmSettingsSounds)("p");for(let e of o.arrBtcLowerAlerts)1==e.status&&(0,l.alarmSettingsSounds)("p");for(let e of o.arrBtcVolumeAlerts)1==e.status&&(0,l.alarmSettingsSounds)("v");for(let e of o.arrEthHigherAlerts)1==e.status&&(0,l.alarmSettingsSounds)("p");for(let e of o.arrEthLowerAlerts)1==e.status&&(0,l.alarmSettingsSounds)("p");for(let e of o.arrEthVolumeAlerts)1==e.status&&(0,l.alarmSettingsSounds)("v")}},637:function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var l=Object.getOwnPropertyDescriptor(t,r);l&&!("get"in l?!t.__esModule:l.writable||l.configurable)||(l={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,l)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),l=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),l(r(849),t),l(r(245),t),l(r(834),t),l(r(794),t),l(r(908),t)},849:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.logs=void 0;const o=r(5);t.logs=function(e,t,r){const l='<span class="date-log">'+o.dateSimple+" - "+o.hourSimple+"</span>";"start"===e?o.logContent.push(`<li class="log-start">- ${l} :: Iniciando AplicaciÃ³n </li>`):"getPrice"===e?o.logContent.push(`<li class="log-start">- ${l} :: Datos cargados CORRECTAMENTE desde Binance </li>`):"getLocalStorage"===e?o.logContent.push(`<li class="log-start">- ${l} :: Datos cargados CORRECTAMENTE desde LocalStorage</li>`):"getPriceError"===e?o.logContent.push(`<li class="log-error">- ${l} :: ERROR en la recogida de datos desde Binance </li>`):"alert"===e&&"price"===t?o.logContent.push(`<li class="log-added">- ${l} :: Alerta de precio aÃ±adida en ${null==r?void 0:r.toUpperCase()} </li>`):"alert"===e&&"volume"===t?o.logContent.push(`<li class="log-added">- ${l} :: Alerta de volumen aÃ±adida en ${null==r?void 0:r.toUpperCase()} </li>`):"alert-match"===e?o.logIdDontRepeat.includes(null==t?void 0:t.id)||(o.logContent.push(`<li class="log-match">- ${l} :: Alerta alcanzada en ${null==t?void 0:t.price}  </li>`),o.logIdDontRepeat.push(null==t?void 0:t.id)):"alert-deleted"===e&&o.logContent.push(`<li class="log-deleted">- ${l} :: Alerta eliminada </li>`);let n=o.logContent.join(" ");document.getElementById("logs-content").innerHTML=n,document.getElementById("reset-log").addEventListener("click",(function(){(0,o.setLogContent)([]),document.getElementById("logs-content").innerHTML=o.logContent}));var s=document.getElementById("logs-content");s.scrollTop=s.scrollHeight-s.clientHeight}},245:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.modifiedAlertCamps=void 0;const o=r(5);t.modifiedAlertCamps=function(){var e,t,r,l,n,s;null===(e=document.getElementById("input-alert-simple"))||void 0===e||e.addEventListener("focus",(function(){this.value=String(o.btcPrice)})),null===(t=document.getElementById("btc-radio"))||void 0===t||t.addEventListener("change",(function(){var e;const t=this.value;(0,o.setCryptoRadioChoice)(t),null===(e=document.getElementById("input-alert-simple"))||void 0===e||e.addEventListener("focus",(function(){this.value=String(o.btcPrice)}))})),null===(r=document.getElementById("eth-radio"))||void 0===r||r.addEventListener("change",(function(){var e;const t=this.value;(0,o.setCryptoRadioChoice)(t),null===(e=document.getElementById("input-alert-simple"))||void 0===e||e.addEventListener("focus",(function(){this.value=String(o.ethPrice)}))})),null===(l=document.getElementById("radio-simple"))||void 0===l||l.addEventListener("change",(function(){document.getElementById("input-alert-simple").style.display="block",document.getElementById("input-alert-1").style.display="none",document.getElementById("input-alert-2").style.display="none",document.getElementById("input-volume-alert").style.display="none",document.querySelector("input[name='input-alert-price']").value="",document.getElementById("alert-desc").value="",(0,o.setAlertTypeChoice)("simple")})),null===(n=document.getElementById("radio-doble"))||void 0===n||n.addEventListener("change",(function(){document.getElementById("input-alert-simple").style.display="none",document.getElementById("input-alert-1").style.display="block",document.getElementById("input-alert-2").style.display="block",document.getElementById("input-volume-alert").style.display="none",document.querySelector("input[name='input-alert-price']").value="",document.getElementById("alert-desc").value="",(0,o.setAlertTypeChoice)("double")})),null===(s=document.getElementById("radio-volume"))||void 0===s||s.addEventListener("change",(function(){document.getElementById("input-alert-simple").style.display="none",document.getElementById("input-alert-1").style.display="none",document.getElementById("input-alert-2").style.display="none",document.getElementById("input-volume-alert").style.display="block",document.querySelector("input[name='input-alert-price']").value="",document.getElementById("alert-desc").value="",(0,o.setAlertTypeChoice)("volume")}))}},834:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeButtons=void 0;const o=r(5),l=r(849);t.removeButtons=function(){let e=o.arrBtcHigherAlerts,t=o.arrBtcLowerAlerts,r=o.arrBtcVolumeAlerts,n=o.arrEthHigherAlerts,s=o.arrEthLowerAlerts,i=o.arrEthVolumeAlerts;const c=document.querySelectorAll("button.btn-remove");for(let a=0;a<c.length;a++)c[a].addEventListener("click",(function(){let c=-1;for(let t of e)parseInt(this.id)==t.id&&(c=e.indexOf(t)),-1!=c&&(e.splice(c,1),(0,o.setArrBtcHigherAlerts)(e),c=-1,(0,l.logs)("alert-deleted",t));for(let e of t)parseInt(this.id)==e.id&&(c=t.indexOf(e)),-1!=c&&(t.splice(c,1),(0,o.setArrBtcLowerAlerts)(t),c=-1,(0,l.logs)("alert-deleted",e));for(let e of r)parseInt(this.id)==e.id&&(c=r.indexOf(e)),-1!=c&&(r.splice(c,1),(0,o.setArrBtcVolumeAlerts)(r),c=-1,(0,l.logs)("alert-deleted",e));for(let e of n)parseInt(this.id)==e.id&&(c=n.indexOf(e)),-1!=c&&(n.splice(c,1),(0,o.setArrEthHigherAlerts)(n),c=-1,(0,l.logs)("alert-deleted",e));for(let e of s)parseInt(this.id)==e.id&&(c=s.indexOf(e)),-1!=c&&(s.splice(c,1),(0,o.setArrEthLowerAlerts)(s),c=-1,(0,l.logs)("alert-deleted",e));for(let e of i)parseInt(this.id)==e.id&&(c=i.indexOf(e)),-1!=c&&(i.splice(c,1),(0,o.setArrEthVolumeAlerts)(i),c=-1,(0,l.logs)("alert-deleted",e))}))}},794:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.showAlertsLi=void 0;const o=r(5),l=r(834);t.showAlertsLi=function(){let e="",t="";const r="blink rojo",n=" d-flex justify-content-between align-middle",s=e=>`<button id="${e}" type="button" class="btn btn-danger btn-remove"> <span aria-hidden="true">&times;</span> </button>`,i=[...o.arrBtcHigherAlerts,...o.arrBtcLowerAlerts,...o.arrBtcVolumeAlerts],c=[...o.arrEthHigherAlerts,...o.arrEthLowerAlerts,...o.arrEthVolumeAlerts];for(let t of i)e+=`<li class="${t.status?r:""} ${t.type} ${n}"> <div> <span class="type"> ${t.type}</span> ${t.price}  <span class="desc-li"> - ${t.description}</span> </div>  <div>  ${s(t.id)} </div> </li> `;document.getElementById("alarms-btc-list").innerHTML=e;for(let e of c)t+=`<li class="${e.status?r:""} ${e.type} ${n}"> <div> <span class="type">${e.type}</span> ${e.price}  <span class="desc-li"> - ${e.description}</span> </div> <div>  ${s(e.id)} </div> </li> `;document.getElementById("alarms-eth-list").innerHTML=t,(0,l.removeButtons)()}},908:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.volumeAlertBtnReset=void 0;const o=r(5);t.volumeAlertBtnReset=function(){document.getElementById("reset-alert-volume").style.display="block",document.getElementById("reset-alert-volume").addEventListener("click",(function(){for(let e of o.arrBtcVolumeAlerts)e.status=!1;for(let e of o.arrEthVolumeAlerts)e.status=!1;document.getElementById("reset-alert-volume").style.display="none"}))}}},t={};function r(o){var l=t[o];if(void 0!==l)return l.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}(()=>{const e=r(221),t=r(395),o=r(353),l=r(489),n=r(637);document.addEventListener("DOMContentLoaded",(function(){setInterval((()=>(0,t.getPriceAndVolume)()),1e3),(0,l.showDate)(),(0,n.modifiedAlertCamps)(),setTimeout((function(){setInterval((function(){0==o.btcPrice&&0==o.ethPrice||((0,l.showDate)(),(0,e.alertFunctionPrice)(),(0,n.showAlertsLi)())}),1e3)}),500),setTimeout((function(){(0,t.checkdata)()}),2e3),setInterval((function(){(0,e.alertFunctionVolume)()}),6e4),setTimeout((function(){0!=o.counterForStorage&&null!=o.counterForStorage&&null!=o.counterForStorage&&(0,n.logs)("getLocalStorage")}),1e3),document.getElementById("add-alert-btn").addEventListener("click",(function(){(0,e.setAlertsForArrays)(o.cryptoRadioChoice,o.alertTypeChoice)})),document.getElementById("togBtn").addEventListener("change",(function(){const e=this.checked;(0,o.setMute)(e)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,